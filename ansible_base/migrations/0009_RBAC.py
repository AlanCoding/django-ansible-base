# Generated by Django 4.2.6 on 2023-11-20 20:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ansible_base', '0008_authenticatormap_name_and_more'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        migrations.swappable_dependency(settings.ROLE_TEAM_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoleDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_index=True, unique=True)),
                ('description', models.TextField(null=True)),
                ('managed', models.BooleanField(default=False)),
                ('permissions', models.ManyToManyField(to='auth.permission')),
            ],
            options={
                'verbose_name_plural': 'role_definition',
            },
        ),
        migrations.CreateModel(
            name='ObjectRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                (
                    'users',
                    models.ManyToManyField(
                        help_text='Users who have access to the permissions defined by this object role',
                        related_name='has_roles',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'role_definition',
                    models.ForeignKey(
                        help_text='The role definition which defines what permissions this object role grants',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ansible_base.roledefinition',
                    ),
                ),
                (
                    'teams',
                    models.ManyToManyField(
                        help_text='Teams or groups who have access to the permissions defined by this object role',
                        related_name='has_roles',
                        to=settings.ROLE_TEAM_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'object_roles',
                'ordering': ('content_type', 'object_id'),
            },
        ),
        migrations.CreateModel(
            name='RoleEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.TextField(help_text='The name of the permission, giving the action and the model, from the Django Permission model')),
                ('content_type_id', models.PositiveIntegerField()),
                ('object_id', models.PositiveIntegerField()),
                (
                    'role',
                    models.ForeignKey(
                        help_text='The object role that grants this form of permission',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='permission_partials',
                        to='ansible_base.objectrole',
                    ),
                ),
            ],
            options={
                'verbose_name_plural': 'role_object_permissions',
                'indexes': [
                    models.Index(fields=['role', 'content_type_id', 'object_id'], name='ansible_bas_role_id_a7c9c2_idx'),
                    models.Index(fields=['role', 'content_type_id', 'codename'], name='ansible_bas_role_id_e7da52_idx'),
                ],
            },
        ),
        migrations.AddIndex(
            model_name='objectrole',
            index=models.Index(fields=['content_type', 'object_id'], name='ansible_bas_content_0088d6_idx'),
        ),
        migrations.AddField(
            model_name='objectrole',
            name='provides_teams',
            field=models.ManyToManyField(
                help_text='Users who have this role obtain member access to these teams, and inherit all their permissions',
                related_name='member_roles',
                to=settings.ROLE_TEAM_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name='objectrole',
            constraint=models.UniqueConstraint(fields=('object_id', 'content_type', 'role_definition'), name='one_object_role_per_object_and_role'),
        ),
        migrations.AddConstraint(
            model_name='roleevaluation',
            constraint=models.UniqueConstraint(fields=('object_id', 'content_type_id', 'codename', 'role'), name='one_entry_per_object_permission_and_role'),
        ),
    ]
